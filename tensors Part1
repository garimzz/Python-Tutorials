
# import torch
import torch

# Get torch version
torch.__version__

*************** TYPE AND SHAPE ******************

# Convert a integer list with length 5 to a tensor
int_list = torch.tensor([1,2,3,4,5])

# Get type of data within tensor
int_list.dtype()

# Get type of object
int_list.type()

# Convert a integer list with length 5 to float tensor
new_float_tensor = torch.FloatTensor([0, 1, 2, 3, 4])

# Another method to convert the integer list to float tensor
old_int_tensor = torch.tensor([0, 1, 2, 3, 4])
new_float_tensor = old_int_tensor.type(torch.FloatTensor)

# Get size and dimensions of tensor
new_float_tensor.size()
new_float_tensor.dimension()

#reshape tensor
twoD_float_tensor.view(5,1)

# Introduce the use of -1 in tensor_obj.view(row, column) method
twoD_float_tensor = new_float_tensor.view(-1, 1) #-1 means any size but only one arg can be set -1

# Convert numpy array to tensor
numpy_array = np.array([0.0, 1.0, 2.0, 3.0, 4.0])
new_tensor = torch.from_numpy(numpy_array)

# Convert a tensor to a numpy array
back_to_numpy = new_tensor.numpy()

# Convert a panda series to a tensor
pandas_series=pd.Series([0.1, 2, 0.3, 10.1])
new_tensor=torch.from_numpy(pandas_series.values)

*************** INDEXING & SLICING ******************

index_tensor = torch.tensor([0, 1, 2, 3, 4])

# Get first value
index_tensor[0]

# Change 2nd value to 9
index_tensor[1] = 9

# Get subset of the tensor
subset_tensor = index_tensor[1:4]

# Change the values on index 3 and index 4
print("Inital value on index 3 and index 4:", tensor_sample[3:5])

# Using variable to contain the selected index, and pass it to slice operation
selected_indexes = [3, 4]
subset_tensor_sample = tensor_sample[selected_indexes]

#Using variable to assign the value to the selected indexes
selected_indexes = [1, 3]
tensor_sample[selected_indexes] = 100000


*************** TENSOR FUNCTIONS ******************
math_tensor = torch.tensor([1.0, -1.0, 1, -1])

# Mean
mean_val = math_tensor.mean()

# Std deviation
std_Val = math_tensor.std()

# Min and Max
min_Val = math_tensor.min()
max_Val = math_tensor.max()

# Sin
pi_tensor = torch.tensor([0, np.pi/2, np.pi])
sin = torch.sin(pi_tensor)

# torch.linspace(min, max, steps) creates equally spaced tensor
len_5_tensor = torch.linspace(-2, 2, steps = 5)


*************** TENSOR OPERATIONS ******************
u = torch.tensor([1, 0])
v = torch.tensor([0, 1])

# Addition
u+v   #[1,1]
u+1   #[2,1]

# Multiplication
u*v   #[0,0] <- [1*0 , 0*1]

# Dot Product
u = torch.tensor([1, 2])
v = torch.tensor([3, 2])
torch.dot(u,v)    # [7] <- [1*3 + 2*2]

